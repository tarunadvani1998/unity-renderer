// AUTOGENERATED, DO NOT EDIT
// Type definitions for server implementations of ports.
// package: 
// file: RendererProtocol.proto
using System.Collections.Generic;
using System.Threading;
using Cysharp.Threading.Tasks;
using Google.Protobuf;
using rpc_csharp.protocol;
using rpc_csharp;

public abstract class CoreService<Context>
{
  public const string ServiceName = "CoreService";

  public delegate UniTask<SendMessageResponse> SendMessage(SendMessageRequest request, Context context , CancellationToken ct);

  public delegate IEnumerator<CallbackStreamMessage> CallbackStream(CallbackStreamRequest request, Context context );

  public static void RegisterService(RpcServerPort<Context> port, SendMessage sendMessage, CallbackStream callbackStream)
  {
    var result = new ServerModuleDefinition<Context>();
      
    result.definition.Add("SendMessage", async (payload, context, ct) => { var res = await sendMessage(SendMessageRequest.Parser.ParseFrom(payload), context, ct); return res?.ToByteString(); });
    result.streamDefinition.Add("CallbackStream", (payload, context) => { return new ProtocolHelpers.StreamEnumerator<CallbackStreamMessage>(callbackStream(CallbackStreamRequest.Parser.ParseFrom(payload), context)); });

    port.RegisterModule(ServiceName, (port) => UniTask.FromResult(result));
  }
}
